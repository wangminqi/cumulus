searchState.loadedDescShard("pallet_bridge_grandpa", 0, "Substrate GRANDPA Pallet\nBlock hash of the bridged chain.\nHasher of the bridged chain.\nBlock id of the bridged chain.\nBlock number of the bridged chain.\nBridged chain from the pallet configuration.\nHeader of the bridged chain.\nHeader data of the bridged chain that is stored at this …\nTrait representing a call that is a sub type of this pallet…\nBridge GRANDPA pallet as header chain.\nThe target that will be used when publishing logs related …\nA bounded GRANDPA Authority List and ID.\nHelper struct that provides methods for working with the …\nInfo about a <code>SubmitParachainHeads</code> call which tries to …\nList of GRANDPA authorities for the current round.\nNumber of the finality target.\nCheck that the GRANDPA head provided by the …\nValidate Grandpa headers in order to avoid “mining” …\nValidate Grandpa headers in order to avoid “mining” …\nExtra size (in bytes) that we assume are included in the …\nExtra weight that we assume is included in the call.\nReturns <code>true</code> if call size/weight is below our estimations …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHeader number.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nMonotonic identifier of the current GRANDPA authority set.\nHeader state root.\nExtract finality proof info from a runtime call.\nExtract finality proof info from a runtime call.\nTry to create a new bounded GRANDPA Authority Set from …\nReturns number of bytes that may be subtracted from the …\nCheck if the <code>SubmitFinalityProof</code> was successfully executed.\nModule, containing weights for this pallet. Autogenerated …\nThe pallet has already been initialized.\nHash of the best finalized header.\nError generated by the <code>OwnedBridgeModule</code> trait.\nThe chain we are bridging to here.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nThe current GRANDPA Authority set.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nCan be used to configure the genesis state of this pallet.\nMaximal number of finalized headers to keep in the storage.\nRelevant fields of imported headers.\n<code>Instance1</code> to be used for instantiable palllets defined …\nThe authority set from the underlying header chain is …\nThe given justification is invalid for the given header.\nMaximal number of “free” mandatory header transactions …\nAdapter for using <code>Config::HeadersToKeep</code> as <code>MaxValues</code> bound …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nThe pallet is not yet initialized.\nThe header being imported is older than the best finalized …\nThe <code>Pallet</code> struct, the main type that implements traits …\nThe current operating mode of the pallet.\nOptional pallet owner.\nThe overarching event type.\nToo many authorities in the set.\nThe scheduled authority set change found in the header is …\nBest finalized chain header has been updated to the header …\nWeights gathered through benchmarking.\nAn auto-generated getter for <code>BestFinalized</code>.\nAuto-generated docs-only module listing all defined …\n“ Number mandatory headers that we may accept in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nOptional module initialization data.\nBootstrap the bridge pallet with an initial header and …\nSee <code>Pallet::initialize</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a call with the variant <code>initialize</code>.\nCreate a call with the variant <code>set_operating_mode</code>.\nCreate a call with the variant <code>set_owner</code>.\nCreate a call with the variant <code>submit_finality_proof</code>.\nOptional module owner account.\nHalt or resume all pallet operations.\nSee <code>Pallet::set_operating_mode</code>.\nChange <code>PalletOwner</code>.\nSee <code>Pallet::set_owner</code>.\nAuto-generated docs-only module listing all (public and …\nVerify a target header is finalized according to the given …\nSee <code>Pallet::submit_finality_proof</code>.\nGet the GRANDPA justifications accepted in the current …\nThe Grandpa info associated to the new best finalized …\nBootstrap the bridge pallet with an initial header and …\nHalt or resume all pallet operations.\nChange <code>PalletOwner</code>.\nVerify a target header is finalized according to the given …\nHash of the best finalized header.\nThe current GRANDPA Authority set.\nNumber mandatory headers that we may accept in the current …\nA ring buffer of imported hashes. Ordered by the insertion …\nCurrent ring buffer position.\nRelevant fields of imported headers.\nHash of the header used to bootstrap the pallet.\nThe current operating mode of the pallet.\nOptional pallet owner.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWeights for <code>pallet_bridge_grandpa</code> that are generated using …\nWeight functions needed for pallet_bridge_grandpa.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: BridgeRialtoGrandpa PalletOperatingMode (r:1 w:0)")