searchState.loadedDescShard("bp_messages", 0, "Primitives of messages module.\nBasic operating mode (Normal/Halted)\nMessage id as a tuple.\nA minimized version of <code>pallet-bridge-messages::Call</code> that …\nDelivered messages with their dispatch result.\nMessage has been received and dispatched. Note that we don…\nThe message proof is empty.\nError returned by the bridged header chain.\nInbound lane data.\nError returned while reading/decoding inbound lane data …\nInbound message details, returned by runtime APIs.\nThe declared message weight is incorrect.\nMessage has invalid nonce and lane has rejected to accept …\nLane id which implements <code>TypeId</code>.\nThe maximal weight in all dimensions.\nMessage as it is stored in the storage.\nMessage key (unique message identifier) as it is stored in …\nMessage nonce. Valid messages will never have 0 nonce.\nOpaque message payload. We only decode this payload when …\nError returned while reading/decoding message data from …\nThe message is too large.\nDeclared messages count doesn’t match actual value.\nMessages pallet operating mode.\nCustom error\nOutbound lane data.\nError returned while reading/decoding outbound lane data …\nOutbound message details, returned by runtime APIs.\nResult of single message receival.\nReceived messages with their dispatch result.\nThe pallet is not accepting outbound messages. Inbound …\nStorage proof related error.\nThere are too many unconfirmed messages at the lane.\nThere are too many unrewarded relayer entries at the lane.\nUnrewarded relayer entry stored in the inbound lane data.\nGist of <code>InboundLaneData::relayers</code> field used by runtime …\nError that happens during message verification.\nConstant version of Add for <code>proof_size</code> component with u64.\nConstant version of Add for <code>ref_time</code> component with u64.\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if all of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nReturns true if any of <code>self</code>’s constituent weights is …\nNonce of the first message that has been delivered …\nCalculate the number of messages that the relayers have …\nTry to increase <code>self</code> by <code>amount</code> via checked addition.\nChecked <code>Weight</code> addition. Computes <code>self + rhs</code>, returning …\nChecked <code>Weight</code> scalar division. Computes …\nCalculates how many <code>other</code> fit into <code>self</code>.\nChecked <code>Weight</code> scalar multiplication. Computes …\nTry to reduce <code>self</code> by <code>amount</code> via checked subtraction.\nChecked <code>Weight</code> subtraction. Computes <code>self - rhs</code>, returning …\nReturns true if delivered messages contain message with …\nMessage dispatch weight.\nComputed message dispatch weight.\nConstant version of Div with u64.\nReturns approximate size of the struct, given a number of …\nReturns the approximate size of the struct as u32, given a …\nNonce of the last message that has been delivered …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct <code>Weight</code> from the same weight for all parts.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nConstruct <code>Weight</code> from weight parts, namely reference time …\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessage key.\nId of the lane which is receiving messages.\nID of the message lane.\nNonce of the last message that a) has been delivered to …\nNonce of the last message that has been delivered to this …\nNonce of the latest message that has been delivered to the …\nNonce of the latest message, generated by us.\nNonce of the latest message, received by bridged chain.\nGet the aggressive max of <code>self</code> and <code>other</code> weight.\nMessages range, delivered by this relayer.\nNumber of messages in the oldest entry of …\nGet the conservative min of <code>self</code> and <code>other</code> weight.\nConstant version of Mul with u64.\nCreate new <code>DeliveredMessages</code> struct that confirms delivery …\nMessage nonce.\nNonce assigned to the message.\nNote new dispatched message.\nNonce of the oldest message that we haven’t yet pruned. …\nMessage payload.\nReturn the storage size part of the weight.\nReturn a mutable reference to the storage size part of the …\nReturn nonces of all currently queued messages (i.e. …\n…\n<code>pallet-bridge-messages::Call::receive_messages_proof</code>\nResult of messages which we tried to dispatch\nReturn the reference time part of the weight.\nReturn a mutable reference to the reference time part of …\nIdentifier of the relayer.\nIdentifiers of relayers and messages that they have …\nIncrement <code>Weight</code> by <code>amount</code> via saturating addition.\nSaturating <code>Weight</code> addition. Computes <code>self + rhs</code>, …\nSaturating <code>Weight</code> scalar division. Computes …\nSaturating <code>Weight</code> scalar multiplication. Computes …\nSaturating <code>Weight</code> scalar exponentiation. Computes …\nReduce <code>Weight</code> by <code>amount</code> via saturating subtraction.\nSaturating <code>Weight</code> subtraction. Computes <code>self - rhs</code>, …\nSet the storage size part of the weight.\nSet the reference time part of the weight.\nSize of the encoded message.\nPrimitives of messages module, that are used on the source …\nStorage keys of bridge messages pallet.\nConstant version of Sub for <code>proof_size</code> component with u64.\nConstant version of Sub for <code>ref_time</code> component with u64.\nPrimitives of messages module, that are used on the target …\nReturn total count of delivered messages.\nTotal number of messages in the relayers vector.\nReturns the total number of messages in the <code>relayers</code> …\nTry to add some <code>other</code> weight while upholding the <code>limit</code>.\nNumber of entries in the <code>InboundLaneData::relayers</code> set.\nReturn a <code>Weight</code> where all fields are zero.\nManages payments that are happening at the source chain …\nError type.\nError type.\nStructure that may be used in place of <code>TargetHeaderChain</code>, …\nLane message verifier.\nMessages bridge API to be used from other pallets.\nProof that messages have been received by target chain.\nBridge that does nothing when message is being sent.\nCallback that is called at the source chain (bridge hub) …\nNumber of messages, delivered by relayers.\nSend message artifacts.\nTarget chain API. Used by source chain to verify target …\nNumber of enqueued messages at the lane, after the message …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNonce of the message.\nNew messages delivery has been confirmed.\nPay rewards for delivering messages to the given relayers.\nSend message over the bridge.\nVerify message payload before we accept it.\nVerify message payload and return Ok(()) if message is …\nVerify messages delivery proof and return lane &amp;&amp; nonce of …\nName of the <code>InboundLanes</code> storage map.\nName of the <code>OPERATING_MODE_VALUE_NAME</code> storage value.\nName of the <code>OutboundLanes</code> storage map.\nName of the <code>OutboundMessages</code> storage map.\nStorage key of the inbound message lane state in the …\nStorage key of the outbound message in the runtime storage.\nStorage key of the <code>PalletOperatingMode</code> value in the …\nStorage key of the outbound message lane state in the …\nManages payments that are happening at the target chain …\nFine-grained result of single message dispatch (for better …\nMessage with decoded dispatch payload.\nMessage data with decoded dispatch payload.\nDecoded message payload type. Valid message may contain …\nError type.\nStructure that may be used in place of <code>SourceHeaderChain</code> …\nCalled when inbound message is received.\nProof that messages are sent from source chain. This may …\nProved messages from single lane of the source chain.\nProved messages from the source chain.\nSource chain API. Used by target chain, to verify source …\nMessage data with decoded dispatch payload.\nCalled when inbound message is received.\nEstimate dispatch weight.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if dispatcher is ready to accept additional …\nMessage key.\nOptional outbound lane state.\nMessages sent through this lane.\nPay rewards for delivering messages to the given relayer.\nResult of dispatch payload decoding.\nVerify messages proof and return proved messages.")