searchState.loadedDescShard("bridge_runtime_common", 0, "Common types/functions that may be used by runtimes of all …\nA duplication of the <code>FilterCall</code> trait.\nA mapping over <code>NetworkId</code>. Since <code>NetworkId</code> doesn’t …\nThe Millau network ID, associated with Kusama.\nThe Rialto network ID, associated with Polkadot.\nThe RialtoParachain network ID, associated with Westend.\nConverts self to XCM’ network id.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nDeclares a runtime-specific …\nCalls <code>U::from(self)</code>.\nTypes that allow runtime to act as a source/target …\nHelpers for implementing various message-related runtime …\nHelpers for generating message storage proofs, that are …\nModule provides utilities for easier XCM handling, e.g: …\nBridge transaction priority calculator.\nSigned extension that refunds relayer if he has delivered …\nChecks if a runtime call is valid.\nAccount id used on the chain.\nName of the paired messages pallet instance at the Bridged …\nType of balances that is used on the chain.\nThe <code>BridgeMessagesCall</code> used by a chain.\nBridged chain in context of message bridge.\nBridged chain in context of message bridge.\nBridged chain that has <code>pallet-bridge-messages</code> module.\nBridged header chain.\nUnderlying chain type.\nHash used on the chain.\nHasher used on the chain.\nBidirectional message bridge.\nA trait defining helper methods for <code>RangeInclusive</code> …\nCall origin on the chain.\nThis chain in context of message bridge.\nThis chain in context of message bridge.\nThis chain that has <code>pallet-bridge-messages</code> module.\nUnderlying chain type.\nA trait that provides the type of the underlying chain.\nComputes the length of the <code>RangeInclusive</code>, checking for …\n…\n<code>pallet-bridge-messages::Call::receive_messages_proof</code>\nComputes the length of the <code>RangeInclusive</code>, saturating in …\nSub-module that is declaring types required for processing …\nSub-module that is declaring types required for processing …\nMessages delivery proof from bridged chain:\nMaximal size of outbound message payload.\nMessage payload for This -&gt; Bridged chain messages.\nMessage verifier that is doing all basic checks.\n‘Parsed’ message delivery proof - inbound lane id and …\n<code>TargetHeaderChain</code> implementation that is using default …\nHash of the bridge header the proof is for.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLane id of which messages were delivered and the proof is …\nReturn maximal message size of This -&gt; Bridged chain …\nStorage trie proof generated for <code>Self::bridged_header_hash</code>.\nDo basic Bridged-chain specific verification of This -&gt; …\nVerify proof of This -&gt; Bridged chain messages delivery.\nDecoded Bridged -&gt; This message payload.\nMessages proof from bridged chain:\n<code>SourceHeaderChain</code> implementation that is using default …\nHash of the finalized bridged header the proof is for.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessages in this proof are sent over this lane.\nReturn maximal dispatch weight of the message we’re able …\nReturn maximal message size given maximal extrinsic size.\nNonce of the last message being delivered.\nNonce of the first message being delivered.\nA storage trie proof of messages being delivered.\nVerify proof of Bridged -&gt; This chain messages.\nImplementation of the <code>To*InboundLaneApi::message_details</code>.\nImplementation of the <code>To*OutboundLaneApi::message_details</code>.\nGeneric info about a messages delivery/confirmation proof.\nHelper struct that provides methods for working with a …\nInfo about a <code>ReceiveMessagesProof</code> or a …\nTrait representing a call that is a sub type of …\nInfo about a <code>ReceiveMessagesDeliveryProof</code> call which tries …\nInfo about a <code>ReceiveMessagesProof</code> call which tries to …\nOccupation state of the unrewarded relayers vector.\nBase messages proof info\nNonce of the best message, stored by this chain before the …\nReturns range of messages, bundled with the call.\nNonces of messages, included in the call.\nCreate a new instance of <code>CallInfo</code> from a …\nCreate a new instance of <code>CallInfo</code> from a …\nCheck that a <code>ReceiveMessagesProof</code> or a …\nThe number of messages that we are ready to accept.\nThe number of remaining unoccupied entries for new …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessage lane, used by the call.\nCreate a new instance of <code>ReceiveMessagesDeliveryProofInfo</code> …\nCreate a new instance of <code>ReceiveMessagesProofInfo</code> from a …\nState of unrewarded relayers vector.\nReturns true if:\nSimple and correct message data encode function.\nSimple and correct outbound lane data encode function.\nAdd extra data to the trie leaf value so that it’ll be …\nPrepare storage proof of given messages.\nAn XCM message that is sent to the sending chain when the …\nManager of local XCM queues (and indirectly - underlying …\nInstance of the messages pallet that is used to send …\nRuntime that has messages pallet deployed.\nA pair of sending chain location and message lane, used by …\nReturns lane used by this hauler.\nActual XCM message sender (<code>HRMP</code> or <code>UMP</code>) to the source chain\nAn XCM message that is sent to the sending chain when the …\nPlain “XCM” payload, which we transfer through bridge\n<code>XcmBlobHauler</code> is responsible for sending messages to the …\nXCM bridge adapter which connects <code>XcmBlobHauler</code> with …\n<code>XcmBlobMessageDispatch</code> is responsible for dispatching …\nMessage dispatch result type for single message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessage lane, used by the sending chain.\nSending chain relative location.\nCreate new object using provided location and lane.\nMust be called whenever we push a message to the bridge …\nMust be called whenever we receive a message delivery …\nReturns <code>true</code> if we want to handle congestion.\nCompute priority boost for message delivery transaction …\n<code>RefundCalculator</code> implementation which refunds the actual …\nRelay chain finality + parachain finality + message …\nType of the call that the extension recognizes.\nDefault implementation of <code>RefundableParachainId</code>.\nThe parachain Id.\nThe messages lane id.\nThe instance of the bridge parachains pallet.\nThe instance of the bridge messages pallet.\nStandalone message delivery/confirmation call.\nParachain finality + message delivery/confirmation calls.\nData that is crafted in <code>pre_dispatch</code> method and used at …\nSigned extension that refunds a relayer for new messages …\nRefund calculator.\nDefault implementation of <code>RefundableMessagesLaneId</code>.\nTrait identifying a bridged messages lane. A relayer might …\nImplementation of <code>RefundableParachainId</code> for <code>trait Parachain</code>…\nTrait identifying a bridged parachain. A relayer might be …\nCompute refund for given transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")